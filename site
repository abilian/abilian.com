#!/usr/bin/env python
# coding=utf-8

import codecs
import locale
import os
import re
from pprint import pprint
from unicodedata import normalize
import datetime
import bleach
from fabric.api import local
from argh import *

from flask import Flask, render_template, redirect, url_for
from flask.ext.frozen import Freezer
from flask.ext.flatpages import FlatPages, Page
from flask.ext.markdown import Markdown
from flask.ext.assets import Environment as AssetManager


# Configuration
DEBUG = True
BASE_URL = 'http://abilian.com'
ASSETS_DEBUG = DEBUG
FLATPAGES_AUTO_RELOAD = True
FLATPAGES_EXTENSION = '.md'
FLATPAGES_ROOT = 'pages'

# App configuration
FEED_MAX_LINKS = 25
SECTION_MAX_LINKS = 12

MAIN_MENU = [
  ('', u'Accueil'),
  ('pourquoi/', u"Pourquoi Abilian ?"),
  ('solutions/', u'Solutions'),
  ('services/', u'Services'),
  ('technologies/', u'Technologies'),
  #('news/', u'Actualité'),
  ('a-propos/', u'A propos'),
]

app = Flask(__name__)
app.config.from_object(__name__)
pages = FlatPages(app)
freezer = Freezer(app)
markdown_manager = Markdown(app)
asset_manager = AssetManager(app)


###############################################################################
# Model helpers
###############################################################################

# Monkey patch
Page__init__orig = Page.__init__

def Page__init__(self, path, meta_yaml, body, html_renderer):
  Page__init__orig(self, path, meta_yaml, body, html_renderer)
  date = self.meta.get('date')

  if not date:
    self.meta['date'] = datetime.date.today()
  elif isinstance(date, str):
    year = int(date[0:4])
    month = int(date[5:7])
    day = int(date[8:10])
    date = datetime.date(year, month, day)
    self.meta['date'] = date

  if not self.meta.get('slug'):
    self.meta['slug'] = self.path.split('/')[-1]

  # Autogenerates abstract if needed
  if not self.meta.get('abstract'):
    abstract = bleach.clean(self.html, tags=[], strip=True)
    print self.html
    print
    print abstract
    print 78 * "="
    if len(abstract) > 250:
      abstract = abstract[0:250] + " [...]"
    self.meta['abstract'] = abstract

Page.__init__ = Page__init__


def get_pages(offset=None, limit=None):
  """
  Retrieves pages matching passed criterias.
  """
  articles = list(pages)
  # assign section value if none was provided in the metas
  for article in articles:
    if not article.meta.get('section'):
      article.meta['section'] = article.path.split('/')[0]

  # filter unpublished article
  if not app.debug:
    articles = [p for p in articles if p.meta.get('published') is True]

  # sort by date
  articles = sorted(articles, reverse=True,
                    key=lambda p: p.meta.get('date', datetime.date.today()))

  if offset and limit:
    return articles[offset:limit]
  elif limit:
    return articles[:limit]
  elif offset:
    return articles[offset:]
  else:
    return articles


def get_years(pages):
  years = list(set([page.meta.get('date').year for page in pages]))
  years.reverse()
  return years


def slugify(text, delim=u'-'):
  """Generates an slightly worse ASCII-only slug."""
  _punct_re = re.compile(r'[\t !"#$%&\'()*\-/<=>?@\[\\\]^_`{|},.]+')
  result = []
  for word in _punct_re.split(text.lower()):
    word = normalize('NFKD', word).encode('ascii', 'ignore')
    if word:
      result.append(word)
  return unicode(delim.join(result))


def get_news(offset=None, limit=None):
  all_pages = get_pages()
  all_news = [ page for page in all_pages if page.path.startswith("fr/news/") ]
  if offset and len(all_news) > offset:
    all_news = all_news[offset:]
  if limit and len(all_news) > limit:
    all_news = all_news[:limit]
  return all_news


###############################################################################
# Filters

@app.template_filter()
def to_rfc2822(dt):
  if not dt:
    return
  current_locale = locale.getlocale(locale.LC_TIME)
  locale.setlocale(locale.LC_TIME, "en_US")
  formatted = dt.strftime("%a, %d %b %Y %H:%M:%S +0000")
  locale.setlocale(locale.LC_TIME, current_locale)
  return formatted


###############################################################################
# Context processors

@app.context_processor
def inject_ga():
  return dict(BASE_URL=BASE_URL)


@app.context_processor
def inject_menu():
  return dict(menu=MAIN_MENU)


###############################################################################
# Freezer helper

@freezer.register_generator
def url_generator():
  # URLs as strings
  yield '/fr/'


###############################################################################
# Routes

@app.route('/')
def index():
  return redirect(url_for(".home", lang='fr'))


@app.route('/<lang>/')
def home(lang):
  template = "index.html"
  page = {'title': 'Abilian: connected we work'}
  news = get_news(limit=4)
  return render_template(template, lang=lang, page=page, news=news)


@app.route('/<lang>/<path:path>/')
def page(lang, path=""):
  page = pages.get_or_404(lang + "/" + path + "/index")
  template = page.meta.get('template', '_page.html')
  return render_template(template, lang=lang, page=page)


@app.route('/<lang>/news/')
def news(lang):
  all_news = get_news()
  page = {'title': u'Actualités pour Abilian'}
  return render_template('news.html', lang=lang, page=page, news=all_news)


@app.route('/feed/')
def feed():
  articles = get_pages(limit=FEED_MAX_LINKS)
  now = datetime.datetime.now()
  return render_template('base.rss', pages=articles, build_date=now)


@app.route('/sitemap.xml')
def sitemap():
  today = datetime.date.today()
  pprint(get_pages())
  recently = datetime.date(year=today.year, month=today.month, day=1)
  return render_template('sitemap.xml', pages=get_pages(),
                         today=today, recently=recently)


#@app.route('/<string:section>/feed/')
#def feed_section(section):
#    articles = get_pages(pages, limit=FEED_MAX_LINKS, section=section)
#    return render_template('%s/feed.rss' % section, pages=articles,
#        build_date=datetime.now())
#
#


@app.route('/403.html')
def error403():
  return render_template('403.html', page=dict(title="Fordidden"))


@app.route('/404.html')
def error404():
  return render_template('404.html', page=dict(title="Not found"))


@app.route('/500.html')
def error500():
  return render_template('500.html')


@app.errorhandler(404)
def page_not_found(error):
  return render_template('404.html'), 404


###############################################################################
# Commands

@command
def build():
  """ Builds this site.
  """
  print("Building website...")
  app.debug = False
  asset_manager.config['ASSETS_DEBUG'] = False
  freezer.freeze()
  local("cp ./static/*.ico ./build/")
  local("cp ./static/*.txt ./build/")
  local("cp ./static/*.xml ./build/")
  print("Done.")


@command
def post(section, title=None, filename=None):
  """ Create a new empty post.
  """
  if not os.path.exists(os.path.join(FLATPAGES_ROOT, section)):
    raise CommandError(u"Section '%s' does not exist" % section)
  post_date = datetime.date.today()
  title = unicode(title) if title else "Untitled Post"
  if not filename:
    filename = u"%s.md" % slugify(title)
  year = post_date.year
  pathargs = [section, str(year), filename, ]
  filepath = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                          FLATPAGES_ROOT, '/'.join(pathargs))
  if os.path.exists(filepath):
    raise CommandError("File %s exists" % filepath)
  content = '\n'.join([
    u"title: %s" % title,
    u"date: %s" % post_date.strftime("%Y-%m-%d"),
    u"published: false\n\n",
  ])
  try:
    codecs.open(filepath, 'w', encoding='utf8').write(content)
    print(u'Created %s' % filepath)
  except Exception, error:
    raise CommandError(error)


@command
def serve(server='127.0.0.1', port=5001, debug=DEBUG):
  """ Serves this site.
  """
  asset_manager.config['ASSETS_DEBUG'] = debug
  if debug:
    app.debug = True
  app.run(host=server, port=port, debug=debug)


if __name__ == '__main__':
  parser = ArghParser()
  parser.add_commands([build, post, serve, ])
  parser.dispatch()
